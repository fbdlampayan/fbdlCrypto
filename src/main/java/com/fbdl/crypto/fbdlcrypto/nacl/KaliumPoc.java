/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fbdl.crypto.fbdlcrypto.nacl;

import java.util.Base64;
import org.abstractj.kalium.NaCl;
import org.abstractj.kalium.crypto.Box;
import org.abstractj.kalium.crypto.Random;
import org.abstractj.kalium.keys.KeyPair;

/**
 *
 * @author fbdl
 */
public class KaliumPoc {
    
    public static void main(String[] args) {
        String secret = "This is super secret";
        byte[] secretPlainText = secret.getBytes();
        
        //create an on-demand keypair that is suitable for curve25519 during provisioning only
        KeyPair ndacKeyPair = new KeyPair(new Random().randomBytes(NaCl.Sodium.CRYPTO_BOX_CURVE25519XSALSA20POLY1305_SECRETKEYBYTES));
        
        //on Edge it is also done on demand (done @ edge side)
        KeyPair edgeKeyPair = new KeyPair(new Random().randomBytes(NaCl.Sodium.CRYPTO_BOX_CURVE25519XSALSA20POLY1305_SECRETKEYBYTES));
        
        //TODO: have the public key signed by Edge Certificate and Transcoder verifies first.
        
        Box box = new Box(edgeKeyPair.getPublicKey(), //sent by edge.
                            ndacKeyPair.getPrivateKey());
        
        //create nonce on-demand according to accepted size
        byte[] nonce = new Random().randomBytes(NaCl.Sodium.CRYPTO_BOX_CURVE25519XSALSA20POLY1305_NONCEBYTES);
        
        // message is encrypted with edge's public key, ndac's private key, and nonce
        // so at Edge to decrypt, it will only need ndac's public key and nonce, plus its own private key.
        byte[] cipherTextResult = box.encrypt(nonce, secretPlainText);
        
        //output to show what it looks like;
        String s = Base64.getEncoder().encodeToString(cipherTextResult);
        System.out.println("cipherText: " + s);
        
        //then from here ndac can throw away the on-demand generated keypair for this session
        //and only edge now has the way of knowing how to decrypt the provisioned data for this "session"

        
        //then on the edge side..
        EdgeSide(ndacKeyPair, edgeKeyPair, nonce, cipherTextResult);
        
    }

    private static void EdgeSide(KeyPair ndacKeyPair, KeyPair edgeKeyPair, byte[] nonce, byte[] cipherTextResult) {        
        ////////////////////////////////////////Edge Side
        Box boxInEdge = new Box(ndacKeyPair.getPublicKey(), edgeKeyPair.getPrivateKey());
        
        byte[] plaintextResult = boxInEdge.decrypt(nonce, //nonce generated by NDAC
                cipherTextResult);
        
        System.out.println("secret in Edge! " + new String(plaintextResult));
        
        //then here Edge can throw away the keypair it generated for this session.
    }
    
}
